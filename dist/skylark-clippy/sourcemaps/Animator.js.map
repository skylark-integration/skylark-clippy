{"version":3,"sources":["Animator.js"],"names":["define","$","Animator","[object Object]","el","path","data","sounds","this","_el","_data","_path","_currentFrameIndex","_currentFrame","undefined","_exiting","_currentAnimation","_endCallback","_started","_sounds","currentAnimationName","preloadSounds","_overlays","curr","_setupElement","i","overlayCount","inner","append","push","frameSize","framesize","css","width","height","r","d","animations","n","length","snd","uri","Audio","name","animationName","stateChangeCallback","hasAnimation","_step","images","xy","bg","background-position","display","currentFrame","branching","exitBranch","rnd","Math","random","branches","branch","weight","frameIndex","s","sound","audio","play","frames","newFrameIndex","min","_getNextAnimationFrame","frameChanged","_atLastFrame","useExitBranching","_draw","_playSound","_loop","window","setTimeout","proxy","duration","States","WAITING","EXITED","clearTimeout"],"mappings":"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","file":"../Animator.js","sourcesContent":["define(['skylark-jquery'], function ($) {\n    'use strict';\n    class Animator {\n        constructor(el, path, data, sounds) {\n            this._el = el;\n            this._data = data;\n            this._path = path;\n            this._currentFrameIndex = 0;\n            this._currentFrame = undefined;\n            this._exiting = false;\n            this._currentAnimation = undefined;\n            this._endCallback = undefined;\n            this._started = false;\n            this._sounds = {};\n            this.currentAnimationName = undefined;\n            this.preloadSounds(sounds);\n            this._overlays = [this._el];\n            let curr = this._el;\n            this._setupElement(this._el);\n            for (let i = 1; i < this._data.overlayCount; i++) {\n                let inner = this._setupElement($('<div></div>'));\n                curr.append(inner);\n                this._overlays.push(inner);\n                curr = inner;\n            }\n        }\n        _setupElement(el) {\n            let frameSize = this._data.framesize;\n            el.css('display', 'none');\n            el.css({\n                width: frameSize[0],\n                height: frameSize[1]\n            });\n            el.css('background', \"url('\" + this._path + \"/map.png') no-repeat\");\n            return el;\n        }\n        animations() {\n            let r = [];\n            let d = this._data.animations;\n            for (let n in d) {\n                r.push(n);\n            }\n            return r;\n        }\n        preloadSounds(sounds) {\n            for (let i = 0; i < this._data.sounds.length; i++) {\n                let snd = this._data.sounds[i];\n                let uri = sounds[snd];\n                if (!uri)\n                    continue;\n                this._sounds[snd] = new Audio(uri);\n            }\n        }\n        hasAnimation(name) {\n            return !!this._data.animations[name];\n        }\n        exitAnimation() {\n            this._exiting = true;\n        }\n        showAnimation(animationName, stateChangeCallback) {\n            this._exiting = false;\n            if (!this.hasAnimation(animationName)) {\n                return false;\n            }\n            this._currentAnimation = this._data.animations[animationName];\n            this.currentAnimationName = animationName;\n            if (!this._started) {\n                this._step();\n                this._started = true;\n            }\n            this._currentFrameIndex = 0;\n            this._currentFrame = undefined;\n            this._endCallback = stateChangeCallback;\n            return true;\n        }\n        _draw() {\n            let images = [];\n            if (this._currentFrame)\n                images = this._currentFrame.images || [];\n            for (let i = 0; i < this._overlays.length; i++) {\n                if (i < images.length) {\n                    let xy = images[i];\n                    let bg = -xy[0] + 'px ' + -xy[1] + 'px';\n                    this._overlays[i].css({\n                        'background-position': bg,\n                        'display': 'block'\n                    });\n                } else {\n                    this._overlays[i].css('display', 'none');\n                }\n            }\n        }\n        _getNextAnimationFrame() {\n            if (!this._currentAnimation)\n                return undefined;\n            if (!this._currentFrame)\n                return 0;\n            let currentFrame = this._currentFrame;\n            let branching = this._currentFrame.branching;\n            if (this._exiting && currentFrame.exitBranch !== undefined) {\n                return currentFrame.exitBranch;\n            } else if (branching) {\n                let rnd = Math.random() * 100;\n                for (let i = 0; i < branching.branches.length; i++) {\n                    let branch = branching.branches[i];\n                    if (rnd <= branch.weight) {\n                        return branch.frameIndex;\n                    }\n                    rnd -= branch.weight;\n                }\n            }\n            return this._currentFrameIndex + 1;\n        }\n        _playSound() {\n            let s = this._currentFrame.sound;\n            if (!s)\n                return;\n            let audio = this._sounds[s];\n            if (audio)\n                audio.play();\n        }\n        _atLastFrame() {\n            return this._currentFrameIndex >= this._currentAnimation.frames.length - 1;\n        }\n        _step() {\n            if (!this._currentAnimation)\n                return;\n            let newFrameIndex = Math.min(this._getNextAnimationFrame(), this._currentAnimation.frames.length - 1);\n            let frameChanged = !this._currentFrame || this._currentFrameIndex !== newFrameIndex;\n            this._currentFrameIndex = newFrameIndex;\n            if (!(this._atLastFrame() && this._currentAnimation.useExitBranching)) {\n                this._currentFrame = this._currentAnimation.frames[this._currentFrameIndex];\n            }\n            this._draw();\n            this._playSound();\n            this._loop = window.setTimeout($.proxy(this._step, this), this._currentFrame.duration);\n            if (this._endCallback && frameChanged && this._atLastFrame()) {\n                if (this._currentAnimation.useExitBranching && !this._exiting) {\n                    this._endCallback(this.currentAnimationName, Animator.States.WAITING);\n                } else {\n                    this._endCallback(this.currentAnimationName, Animator.States.EXITED);\n                }\n            }\n        }\n        pause() {\n            window.clearTimeout(this._loop);\n        }\n        resume() {\n            this._step();\n        }\n    }\n    \n    Animator.States = {\n        WAITING: 1,\n        EXITED: 0\n    };\n\n    return Animator;\n});"]}