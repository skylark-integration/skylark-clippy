{"version":3,"sources":["skylark-clippy.js"],"names":["define","$","[object Object]","onEmptyCallback","this","_queue","_onEmptyCallback","func","push","length","_active","_progressQueue","f","shift","completeFunction","proxy","next","Animator","el","path","data","sounds","_el","_data","_path","_currentFrameIndex","_currentFrame","undefined","_exiting","_currentAnimation","_endCallback","_started","_sounds","currentAnimationName","preloadSounds","_overlays","curr","_setupElement","i","overlayCount","inner","append","frameSize","framesize","css","width","height","r","d","animations","n","snd","uri","Audio","name","animationName","stateChangeCallback","hasAnimation","_step","images","xy","bg","background-position","display","currentFrame","branching","exitBranch","rnd","Math","random","branches","branch","weight","frameIndex","s","sound","audio","play","frames","newFrameIndex","min","_getNextAnimationFrame","frameChanged","_atLastFrame","useExitBranching","_draw","_playSound","_loop","window","setTimeout","duration","States","WAITING","EXITED","clearTimeout","targetEl","_targetEl","_hidden","_setup","WORD_SPEAK_TIME","CLOSE_BALLOON_DELAY","_BALLOON_MARGIN","_balloon","hide","_content","find","document","body","sides","_position","_isOut","side","o","offset","h","w","top","scrollTop","left","scrollLeft","bH","outerHeight","bW","outerWidth","removeClass","addClass","wW","wH","sT","sL","complete","text","hold","show","c","reposition","_complete","_sayWords","fast","_hiding","_finishHideBalloon","_hold","words","split","time","idx","_addWord","slice","join","Queue","Balloon","_onQueueEmpty","_animator","_setupEvents","x","y","_getDirection","gAnim","lookAnim","animation","callback","stop","pause","_playInternal","dir","anim","_addToQueue","animate","state","exitAnimation","_isIdleAnimation","_idleDfd","done","showAnimation","timeout","cb","completed","resume","speak","close","clear","floor","indexOf","centerX","centerY","a","b","round","atan2","PI","idleAnim","_getIdleAnimation","Deferred","_onIdleComplete","resolve","on","_onMouseDown","_onDoubleClick","is","e","preventDefault","_startDrag","_offset","_calculateClickOffset","_moveHandle","_dragMove","_upHandle","_finishDrag","_dragUpdateLoop","_updateLocation","mouseX","pageX","mouseY","pageY","_targetY","_targetX","clientX","clientY","off","scope","queue","Agent","load","successCb","failCb","base_path","CLIPPY_CDN","mapDfd","_loadMap","agentDfd","_loadAgent","soundsDfd","_loadSounds","when","fail","dfd","_maps","src","img","Image","onload","onerror","reject","setAttribute","promise","createElement","canPlayMp3","canPlayType","canPlayOgg","_loadScript","_getAgentDfd","script","head","appendChild","ready","soundsReady","skylark","loads","clippy","attach","main"],"mappings":"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","file":"../skylark-clippy.js","sourcesContent":["define('skylark-clippy/Queue',['skylark-jquery'], function ($) {\n    'use strict';\n    class Queue {\n        constructor(onEmptyCallback) {\n            this._queue = [];\n            this._onEmptyCallback = onEmptyCallback;\n        }\n        queue(func) {\n            this._queue.push(func);\n            if (this._queue.length === 1 && !this._active) {\n                this._progressQueue();\n            }\n        }\n        _progressQueue() {\n            if (!this._queue.length) {\n                this._onEmptyCallback();\n                return;\n            }\n            let f = this._queue.shift();\n            this._active = true;\n            let completeFunction = $.proxy(this.next, this);\n            f(completeFunction);\n        }\n        clear() {\n            this._queue = [];\n        }\n        next() {\n            this._active = false;\n            this._progressQueue();\n        }\n    }\n\n    return Queue;\n});\ndefine('skylark-clippy/Animator',['skylark-jquery'], function ($) {\n    'use strict';\n    class Animator {\n        constructor(el, path, data, sounds) {\n            this._el = el;\n            this._data = data;\n            this._path = path;\n            this._currentFrameIndex = 0;\n            this._currentFrame = undefined;\n            this._exiting = false;\n            this._currentAnimation = undefined;\n            this._endCallback = undefined;\n            this._started = false;\n            this._sounds = {};\n            this.currentAnimationName = undefined;\n            this.preloadSounds(sounds);\n            this._overlays = [this._el];\n            let curr = this._el;\n            this._setupElement(this._el);\n            for (let i = 1; i < this._data.overlayCount; i++) {\n                let inner = this._setupElement($('<div></div>'));\n                curr.append(inner);\n                this._overlays.push(inner);\n                curr = inner;\n            }\n        }\n        _setupElement(el) {\n            let frameSize = this._data.framesize;\n            el.css('display', 'none');\n            el.css({\n                width: frameSize[0],\n                height: frameSize[1]\n            });\n            el.css('background', \"url('\" + this._path + \"/map.png') no-repeat\");\n            return el;\n        }\n        animations() {\n            let r = [];\n            let d = this._data.animations;\n            for (let n in d) {\n                r.push(n);\n            }\n            return r;\n        }\n        preloadSounds(sounds) {\n            for (let i = 0; i < this._data.sounds.length; i++) {\n                let snd = this._data.sounds[i];\n                let uri = sounds[snd];\n                if (!uri)\n                    continue;\n                this._sounds[snd] = new Audio(uri);\n            }\n        }\n        hasAnimation(name) {\n            return !!this._data.animations[name];\n        }\n        exitAnimation() {\n            this._exiting = true;\n        }\n        showAnimation(animationName, stateChangeCallback) {\n            this._exiting = false;\n            if (!this.hasAnimation(animationName)) {\n                return false;\n            }\n            this._currentAnimation = this._data.animations[animationName];\n            this.currentAnimationName = animationName;\n            if (!this._started) {\n                this._step();\n                this._started = true;\n            }\n            this._currentFrameIndex = 0;\n            this._currentFrame = undefined;\n            this._endCallback = stateChangeCallback;\n            return true;\n        }\n        _draw() {\n            let images = [];\n            if (this._currentFrame)\n                images = this._currentFrame.images || [];\n            for (let i = 0; i < this._overlays.length; i++) {\n                if (i < images.length) {\n                    let xy = images[i];\n                    let bg = -xy[0] + 'px ' + -xy[1] + 'px';\n                    this._overlays[i].css({\n                        'background-position': bg,\n                        'display': 'block'\n                    });\n                } else {\n                    this._overlays[i].css('display', 'none');\n                }\n            }\n        }\n        _getNextAnimationFrame() {\n            if (!this._currentAnimation)\n                return undefined;\n            if (!this._currentFrame)\n                return 0;\n            let currentFrame = this._currentFrame;\n            let branching = this._currentFrame.branching;\n            if (this._exiting && currentFrame.exitBranch !== undefined) {\n                return currentFrame.exitBranch;\n            } else if (branching) {\n                let rnd = Math.random() * 100;\n                for (let i = 0; i < branching.branches.length; i++) {\n                    let branch = branching.branches[i];\n                    if (rnd <= branch.weight) {\n                        return branch.frameIndex;\n                    }\n                    rnd -= branch.weight;\n                }\n            }\n            return this._currentFrameIndex + 1;\n        }\n        _playSound() {\n            let s = this._currentFrame.sound;\n            if (!s)\n                return;\n            let audio = this._sounds[s];\n            if (audio)\n                audio.play();\n        }\n        _atLastFrame() {\n            return this._currentFrameIndex >= this._currentAnimation.frames.length - 1;\n        }\n        _step() {\n            if (!this._currentAnimation)\n                return;\n            let newFrameIndex = Math.min(this._getNextAnimationFrame(), this._currentAnimation.frames.length - 1);\n            let frameChanged = !this._currentFrame || this._currentFrameIndex !== newFrameIndex;\n            this._currentFrameIndex = newFrameIndex;\n            if (!(this._atLastFrame() && this._currentAnimation.useExitBranching)) {\n                this._currentFrame = this._currentAnimation.frames[this._currentFrameIndex];\n            }\n            this._draw();\n            this._playSound();\n            this._loop = window.setTimeout($.proxy(this._step, this), this._currentFrame.duration);\n            if (this._endCallback && frameChanged && this._atLastFrame()) {\n                if (this._currentAnimation.useExitBranching && !this._exiting) {\n                    this._endCallback(this.currentAnimationName, Animator.States.WAITING);\n                } else {\n                    this._endCallback(this.currentAnimationName, Animator.States.EXITED);\n                }\n            }\n        }\n        pause() {\n            window.clearTimeout(this._loop);\n        }\n        resume() {\n            this._step();\n        }\n    }\n    \n    Animator.States = {\n        WAITING: 1,\n        EXITED: 0\n    };\n\n    return Animator;\n});\ndefine('skylark-clippy/Balloon',['skylark-jquery'], function ($) {\n    'use strict';\n    class Balloon {\n        constructor(targetEl) {\n            this._targetEl = targetEl;\n            this._hidden = true;\n            this._setup();\n            this.WORD_SPEAK_TIME = 200;\n            this.CLOSE_BALLOON_DELAY = 2000;\n            this._BALLOON_MARGIN = 15;\n        }\n        _setup() {\n            this._balloon = $('<div class=\"clippy-balloon\"><div class=\"clippy-tip\"></div><div class=\"clippy-content\"></div></div> ').hide();\n            this._content = this._balloon.find('.clippy-content');\n            $(document.body).append(this._balloon);\n        }\n        reposition() {\n            let sides = [\n                'top-left',\n                'top-right',\n                'bottom-left',\n                'bottom-right'\n            ];\n            for (let i = 0; i < sides.length; i++) {\n                let s = sides[i];\n                this._position(s);\n                if (!this._isOut())\n                    break;\n            }\n        }\n        _position(side) {\n            let o = this._targetEl.offset();\n            let h = this._targetEl.height();\n            let w = this._targetEl.width();\n            o.top -= $(window).scrollTop();\n            o.left -= $(window).scrollLeft();\n            let bH = this._balloon.outerHeight();\n            let bW = this._balloon.outerWidth();\n            this._balloon.removeClass('clippy-top-left');\n            this._balloon.removeClass('clippy-top-right');\n            this._balloon.removeClass('clippy-bottom-right');\n            this._balloon.removeClass('clippy-bottom-left');\n            let left, top;\n            switch (side) {\n            case 'top-left':\n                left = o.left + w - bW;\n                top = o.top - bH - this._BALLOON_MARGIN;\n                break;\n            case 'top-right':\n                left = o.left;\n                top = o.top - bH - this._BALLOON_MARGIN;\n                break;\n            case 'bottom-right':\n                left = o.left;\n                top = o.top + h + this._BALLOON_MARGIN;\n                break;\n            case 'bottom-left':\n                left = o.left + w - bW;\n                top = o.top + h + this._BALLOON_MARGIN;\n                break;\n            }\n            this._balloon.css({\n                top: top,\n                left: left\n            });\n            this._balloon.addClass('clippy-' + side);\n        }\n        _isOut() {\n            let o = this._balloon.offset();\n            let bH = this._balloon.outerHeight();\n            let bW = this._balloon.outerWidth();\n            let wW = $(window).width();\n            let wH = $(window).height();\n            let sT = $(document).scrollTop();\n            let sL = $(document).scrollLeft();\n            let top = o.top - sT;\n            let left = o.left - sL;\n            let m = 5;\n            if (top - m < 0 || left - m < 0)\n                return true;\n            return top + bH + m > wH || left + bW + m > wW;\n        }\n        speak(complete, text, hold) {\n            this._hidden = false;\n            this.show();\n            let c = this._content;\n            c.height('auto');\n            c.width('auto');\n            c.text(text);\n            c.height(c.height());\n            c.width(c.width());\n            c.text('');\n            this.reposition();\n            this._complete = complete;\n            this._sayWords(text, hold, complete);\n        }\n        show() {\n            if (this._hidden)\n                return;\n            this._balloon.show();\n        }\n        hide(fast) {\n            if (fast) {\n                this._balloon.hide();\n                return;\n            }\n            this._hiding = window.setTimeout($.proxy(this._finishHideBalloon, this), this.CLOSE_BALLOON_DELAY);\n        }\n        _finishHideBalloon() {\n            if (this._active)\n                return;\n            this._balloon.hide();\n            this._hidden = true;\n            this._hiding = null;\n        }\n        _sayWords(text, hold, complete) {\n            this._active = true;\n            this._hold = hold;\n            let words = text.split(/[^\\S-]/);\n            let time = this.WORD_SPEAK_TIME;\n            let el = this._content;\n            let idx = 1;\n            this._addWord = $.proxy(function () {\n                if (!this._active)\n                    return;\n                if (idx > words.length) {\n                    delete this._addWord;\n                    this._active = false;\n                    if (!this._hold) {\n                        complete();\n                        this.hide();\n                    }\n                } else {\n                    el.text(words.slice(0, idx).join(' '));\n                    idx++;\n                    this._loop = window.setTimeout($.proxy(this._addWord, this), time);\n                }\n            }, this);\n            this._addWord();\n        }\n        close() {\n            if (this._active) {\n                this._hold = false;\n            } else if (this._hold) {\n                this._complete();\n            }\n        }\n        pause() {\n            window.clearTimeout(this._loop);\n            if (this._hiding) {\n                window.clearTimeout(this._hiding);\n                this._hiding = null;\n            }\n        }\n        resume() {\n            if (this._addWord) {\n                this._addWord();\n            } else if (!this._hold && !this._hidden) {\n                this._hiding = window.setTimeout($.proxy(this._finishHideBalloon, this), this.CLOSE_BALLOON_DELAY);\n            }\n        }\n    }\n\n    return Balloon;\n});\ndefine('skylark-clippy/Agent',[\n    'skylark-jquery',\n    './Queue',\n    './Animator',\n    './Balloon'\n], function ($, Queue, Animator, Balloon) {\n    'use strict';\n     class Agent {\n        constructor(path, data, sounds) {\n            this.path = path;\n            this._queue = new Queue($.proxy(this._onQueueEmpty, this));\n            this._el = $('<div class=\"clippy\"></div>').hide();\n            $(document.body).append(this._el);\n            this._animator = new Animator(this._el, path, data, sounds);\n            this._balloon = new Balloon(this._el);\n            this._setupEvents();\n        }\n        gestureAt(x, y) {\n            let d = this._getDirection(x, y);\n            let gAnim = 'Gesture' + d;\n            let lookAnim = 'Look' + d;\n            let animation = this.hasAnimation(gAnim) ? gAnim : lookAnim;\n            return this.play(animation);\n        }\n        hide(fast, callback) {\n            this._hidden = true;\n            let el = this._el;\n            this.stop();\n            if (fast) {\n                this._el.hide();\n                this.stop();\n                this.pause();\n                if (callback)\n                    callback();\n                return;\n            }\n            return this._playInternal('Hide', function () {\n                el.hide();\n                this.pause();\n                if (callback)\n                    callback();\n            });\n        }\n        moveTo(x, y, duration) {\n            let dir = this._getDirection(x, y);\n            let anim = 'Move' + dir;\n            if (duration === undefined)\n                duration = 1000;\n            this._addToQueue(function (complete) {\n                if (duration === 0) {\n                    this._el.css({\n                        top: y,\n                        left: x\n                    });\n                    this.reposition();\n                    complete();\n                    return;\n                }\n                if (!this.hasAnimation(anim)) {\n                    this._el.animate({\n                        top: y,\n                        left: x\n                    }, duration, complete);\n                    return;\n                }\n                let callback = $.proxy(function (name, state) {\n                    if (state === Animator.States.EXITED) {\n                        complete();\n                    }\n                    if (state === Animator.States.WAITING) {\n                        this._el.animate({\n                            top: y,\n                            left: x\n                        }, duration, $.proxy(function () {\n                            this._animator.exitAnimation();\n                        }, this));\n                    }\n                }, this);\n                this._playInternal(anim, callback);\n            }, this);\n        }\n        _playInternal(animation, callback) {\n            if (this._isIdleAnimation() && this._idleDfd && this._idleDfd.state() === 'pending') {\n                this._idleDfd.done($.proxy(function () {\n                    this._playInternal(animation, callback);\n                }, this));\n            }\n            this._animator.showAnimation(animation, callback);\n        }\n        play(animation, timeout, cb) {\n            if (!this.hasAnimation(animation))\n                return false;\n            if (timeout === undefined)\n                timeout = 5000;\n            this._addToQueue(function (complete) {\n                let completed = false;\n                let callback = function (name, state) {\n                    if (state === Animator.States.EXITED) {\n                        completed = true;\n                        if (cb)\n                            cb();\n                        complete();\n                    }\n                };\n                if (timeout) {\n                    window.setTimeout($.proxy(function () {\n                        if (completed)\n                            return;\n                        this._animator.exitAnimation();\n                    }, this), timeout);\n                }\n                this._playInternal(animation, callback);\n            }, this);\n            return true;\n        }\n        show(fast) {\n            this._hidden = false;\n            if (fast) {\n                this._el.show();\n                this.resume();\n                this._onQueueEmpty();\n                return;\n            }\n            if (this._el.css('top') === 'auto' || !this._el.css('left') === 'auto') {\n                let left = $(window).width() * 0.8;\n                let top = ($(window).height() + $(document).scrollTop()) * 0.8;\n                this._el.css({\n                    top: top,\n                    left: left\n                });\n            }\n            this.resume();\n            return this.play('Show');\n        }\n        speak(text, hold) {\n            this._addToQueue(function (complete) {\n                this._balloon.speak(complete, text, hold);\n            }, this);\n        }\n        closeBalloon() {\n            this._balloon.hide();\n        }\n        delay(time) {\n            time = time || 250;\n            this._addToQueue(function (complete) {\n                this._onQueueEmpty();\n                window.setTimeout(complete, time);\n            });\n        }\n        stopCurrent() {\n            this._animator.exitAnimation();\n            this._balloon.close();\n        }\n        stop() {\n            this._queue.clear();\n            this._animator.exitAnimation();\n            this._balloon.hide();\n        }\n        hasAnimation(name) {\n            return this._animator.hasAnimation(name);\n        }\n        animations() {\n            return this._animator.animations();\n        }\n        animate() {\n            let animations = this.animations();\n            let anim = animations[Math.floor(Math.random() * animations.length)];\n            if (anim.indexOf('Idle') === 0) {\n                return this.animate();\n            }\n            return this.play(anim);\n        }\n        _getDirection(x, y) {\n            let offset = this._el.offset();\n            let h = this._el.height();\n            let w = this._el.width();\n            let centerX = offset.left + w / 2;\n            let centerY = offset.top + h / 2;\n            let a = centerY - y;\n            let b = centerX - x;\n            let r = Math.round(180 * Math.atan2(a, b) / Math.PI);\n            if (-45 <= r && r < 45)\n                return 'Right';\n            if (45 <= r && r < 135)\n                return 'Up';\n            if (135 <= r && r <= 180 || -180 <= r && r < -135)\n                return 'Left';\n            if (-135 <= r && r < -45)\n                return 'Down';\n            return 'Top';\n        }\n        _onQueueEmpty() {\n            if (this._hidden || this._isIdleAnimation())\n                return;\n            let idleAnim = this._getIdleAnimation();\n            this._idleDfd = $.Deferred();\n            this._animator.showAnimation(idleAnim, $.proxy(this._onIdleComplete, this));\n        }\n        _onIdleComplete(name, state) {\n            if (state === Animator.States.EXITED) {\n                this._idleDfd.resolve();\n            }\n        }\n        _isIdleAnimation() {\n            let c = this._animator.currentAnimationName;\n            return c && c.indexOf('Idle') === 0;\n        }\n        _getIdleAnimation() {\n            let animations = this.animations();\n            let r = [];\n            for (let i = 0; i < animations.length; i++) {\n                let a = animations[i];\n                if (a.indexOf('Idle') === 0) {\n                    r.push(a);\n                }\n            }\n            let idx = Math.floor(Math.random() * r.length);\n            return r[idx];\n        }\n        _setupEvents() {\n            $(window).on('resize', $.proxy(this.reposition, this));\n            this._el.on('mousedown', $.proxy(this._onMouseDown, this));\n            this._el.on('dblclick', $.proxy(this._onDoubleClick, this));\n        }\n        _onDoubleClick() {\n            if (!this.play('ClickedOn')) {\n                this.animate();\n            }\n        }\n        reposition() {\n            if (!this._el.is(':visible'))\n                return;\n            let o = this._el.offset();\n            let bH = this._el.outerHeight();\n            let bW = this._el.outerWidth();\n            let wW = $(window).width();\n            let wH = $(window).height();\n            let sT = $(window).scrollTop();\n            let sL = $(window).scrollLeft();\n            let top = o.top - sT;\n            let left = o.left - sL;\n            let m = 5;\n            if (top - m < 0) {\n                top = m;\n            } else if (top + bH + m > wH) {\n                top = wH - bH - m;\n            }\n            if (left - m < 0) {\n                left = m;\n            } else if (left + bW + m > wW) {\n                left = wW - bW - m;\n            }\n            this._el.css({\n                left: left,\n                top: top\n            });\n            this._balloon.reposition();\n        }\n        _onMouseDown(e) {\n            e.preventDefault();\n            this._startDrag(e);\n        }\n        _startDrag(e) {\n            this.pause();\n            this._balloon.hide(true);\n            this._offset = this._calculateClickOffset(e);\n            this._moveHandle = $.proxy(this._dragMove, this);\n            this._upHandle = $.proxy(this._finishDrag, this);\n            $(window).on('mousemove', this._moveHandle);\n            $(window).on('mouseup', this._upHandle);\n            this._dragUpdateLoop = window.setTimeout($.proxy(this._updateLocation, this), 10);\n        }\n        _calculateClickOffset(e) {\n            let mouseX = e.pageX;\n            let mouseY = e.pageY;\n            let o = this._el.offset();\n            return {\n                top: mouseY - o.top,\n                left: mouseX - o.left\n            };\n        }\n        _updateLocation() {\n            this._el.css({\n                top: this._targetY,\n                left: this._targetX\n            });\n            this._dragUpdateLoop = window.setTimeout($.proxy(this._updateLocation, this), 10);\n        }\n        _dragMove(e) {\n            e.preventDefault();\n            let x = e.clientX - this._offset.left;\n            let y = e.clientY - this._offset.top;\n            this._targetX = x;\n            this._targetY = y;\n        }\n        _finishDrag() {\n            window.clearTimeout(this._dragUpdateLoop);\n            $(window).off('mousemove', this._moveHandle);\n            $(window).off('mouseup', this._upHandle);\n            this._balloon.show();\n            this.reposition();\n            this.resume();\n        }\n        _addToQueue(func, scope) {\n            if (scope)\n                func = $.proxy(func, scope);\n            this._queue.queue(func);\n        }\n        pause() {\n            this._animator.pause();\n            this._balloon.pause();\n        }\n        resume() {\n            this._animator.resume();\n            this._balloon.resume();\n        }\n    }\n\n    return Agent;\n});\ndefine('skylark-clippy/loads',[\n    'skylark-jquery',\n    './Agent'\n], function ($, Agent) {\n    'use strict';\n    class load {\n        constructor(name, successCb, failCb, base_path) {\n            base_path = base_path || window.CLIPPY_CDN || 'https://gitcdn.xyz/repo/pi0/clippyjs/master/assets/agents/';\n            let path = base_path + name;\n            let mapDfd = load._loadMap(path);\n            let agentDfd = load._loadAgent(name, path);\n            let soundsDfd = load._loadSounds(name, path);\n            let data;\n            agentDfd.done(function (d) {\n                data = d;\n            });\n            let sounds;\n            soundsDfd.done(function (d) {\n                sounds = d;\n            });\n            let cb = function () {\n                let a = new Agent(path, data, sounds);\n                successCb(a);\n            };\n            $.when(mapDfd, agentDfd, soundsDfd).done(cb).fail(failCb);\n        }\n        static _loadMap(path) {\n            let dfd = load._maps[path];\n            if (dfd)\n                return dfd;\n            dfd = load._maps[path] = $.Deferred();\n            let src = path + '/map.png';\n            let img = new Image();\n            img.onload = dfd.resolve;\n            img.onerror = dfd.reject;\n            img.setAttribute('src', src);\n            return dfd.promise();\n        }\n        static _loadSounds(name, path) {\n            let dfd = load._sounds[name];\n            if (dfd)\n                return dfd;\n            dfd = load._sounds[name] = $.Deferred();\n            let audio = document.createElement('audio');\n            let canPlayMp3 = !!audio.canPlayType && '' !== audio.canPlayType('audio/mpeg');\n            let canPlayOgg = !!audio.canPlayType && '' !== audio.canPlayType('audio/ogg; codecs=\"vorbis\"');\n            if (!canPlayMp3 && !canPlayOgg) {\n                dfd.resolve({});\n            } else {\n                let src = path + (canPlayMp3 ? '/sounds-mp3.js' : '/sounds-ogg.js');\n                load._loadScript(src);\n            }\n            return dfd.promise();\n        }\n        static _loadAgent(name, path) {\n            let dfd = load._data[name];\n            if (dfd)\n                return dfd;\n            dfd = load._getAgentDfd(name);\n            let src = path + '/agent.js';\n            load._loadScript(src);\n            return dfd.promise();\n        }\n        static _loadScript(src) {\n            let script = document.createElement('script');\n            script.setAttribute('src', src);\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            document.head.appendChild(script);\n        }\n        static _getAgentDfd(name) {\n            let dfd = load._data[name];\n            if (!dfd) {\n                dfd = load._data[name] = $.Deferred();\n            }\n            return dfd;\n        }\n    }\n    load._maps = {};\n    load._sounds = {};\n    load._data = {};\n    function ready(name, data) {\n        let dfd = load._getAgentDfd(name);\n        dfd.resolve(data);\n    }\n    function soundsReady(name, data) {\n        let dfd = load._sounds[name];\n        if (!dfd) {\n            dfd = load._sounds[name] = $.Deferred();\n        }\n        dfd.resolve(data);\n    }\n    return {\n        load: load,\n        ready: ready,\n        soundsReady: soundsReady\n    };\n});\ndefine('skylark-clippy/main',[\n    \"skylark-langx/skylark\",\n    './Agent',\n    './Animator',\n    './Queue',\n    './Balloon',\n    './loads'\n], function (skylark,Agent, Animator, Queue, Balloon, loads) {\n    'use strict';\n\n    const clippy = {\n        Agent,\n        Animator,\n        Queue,\n        Balloon,\n        \"load\" : loads.load,\n        \"ready\": loads.ready,\n        \"soundsReady\": loads.soundsReady\n    };\n    return skylark.attach(\"intg.clippy\",clippy);\n\n});\ndefine('skylark-clippy', ['skylark-clippy/main'], function (main) { return main; });\n\n"]}